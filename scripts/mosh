#!/usr/bin/env perl

#   Mosh: the mobile shell
#   Copyright 2012 Keith Winstein
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

my $MOSH_VERSION = '1.1.3a';

use warnings;
use strict;
use Socket qw(SOCK_STREAM IPPROTO_TCP);
use IO::Pty;
use Net::INET6Glue;
use Socket::GetAddrInfo qw(:newapi :NI getaddrinfo getnameinfo);
use Getopt::Long;

$|=1;

my $client = 'mosh-client';
my $server = 'mosh-server';

my $predict = undef;

my $port_request = undef;

my $ssh = 'ssh';

my $help = undef;
my $version = undef;

my $usage =
qq{Usage: $0 [options] [user@]host
        --client=PATH        mosh client on local machine
                                (default: mosh-client)
        --server=PATH        mosh server on remote machine
                                (default: mosh-server)

        --predict=adaptive   local echo for slower links [default]
-a      --predict=always     use local echo even on fast links
-n      --predict=never      never use local echo

-p NUM  --port=NUM           server-side UDP port

        --ssh=COMMAND        ssh command to run when setting up session
                                (example: "ssh -p 2222")
                                (default: "ssh")

        --help               this message
        --version            version and copyright information

Please report bugs to mosh-devel\@mit.edu.
Mosh home page: http://mosh.mit.edu\n};

my $version_message = qq{mosh $MOSH_VERSION
Copyright 2012 Keith Winstein <mosh-devel\@mit.edu>
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.\n};

sub predict_check {
  my ( $predict, $env_set ) = @_;

  if ( not exists { adaptive => 0, always => 0, never => 0 }->{ $predict } ) {
    my $explanation = $env_set ? " (MOSH_PREDICTION_DISPLAY in environment)" : "";
    print STDERR qq{$0: Unknown mode \"$predict\"$explanation.\n\n};

    die $usage;
  }
}

GetOptions( 'client=s' => \$client,
	    'server=s' => \$server,
	    'predict=s' => \$predict,
	    'port=i' => \$port_request,
	    'a' => sub { $predict = 'always' },
	    'n' => sub { $predict = 'never' },
	    'p=i' => \$port_request,
	    'ssh=s' => \$ssh,
	    'help' => \$help,
	    'version' => \$version,
	    'fake-proxy!' => \my $fake_proxy ) or die $usage;

die $usage if ( defined $help );
die $version_message if ( defined $version );

if ( defined $predict ) {
  predict_check( $predict, 0 );
} elsif ( defined $ENV{ 'MOSH_PREDICTION_DISPLAY' } ) {
  $predict = $ENV{ 'MOSH_PREDICTION_DISPLAY' };
  predict_check( $predict, 1 );
} else {
  $predict = 'adaptive';
  predict_check( $predict, 0 );
}

if ( defined $port_request ) {
  if ( $port_request =~ m{^[0-9]+$}
       and $port_request >= 0
       and $port_request <= 65535 ) {
    # good port
  } else {
    die "$0: Server-side port ($port_request) must be within valid range [0..65535].\n";
  }
}

delete $ENV{ 'MOSH_PREDICTION_DISPLAY' };

if ( defined $fake_proxy ) {
  use Errno qw(EINTR);
  use IO::Socket::INET;
  use POSIX qw(_exit);

  my ( $host, $port ) = @ARGV;

  my $sock;
  my %hints = (socktype => SOCK_STREAM, protocol => IPPROTO_TCP);
  my ($err, @res) = getaddrinfo($host, $port, \%hints);
  die "Cannot resolve name: $err" if $err;
  while (my $ai = shift @res) {
    $sock = IO::Socket->new();
    $sock->socket($ai->{family}, $ai->{socktype}, $ai->{protocol}) or undef $sock, next;
    $sock->connect($ai->{addr}) or undef $sock, next;
    last;
  }

  if (!defined($sock)) {
    die "Could not connect to $host:$port";
  }

  my ($ni_err, $ni_host, $ni_service) = getnameinfo($sock->peername, NI_NUMERICHOST | NI_NUMERICSERV);
  if ($ni_err) {
    die "Could not get name: $ni_err";
  }

  print STDERR "MOSH IP $ni_host\n";

  sub cat {
    my ( $from, $to ) = @_;
    while ( my $n = $from->sysread( my $buf, 4096 ) ) {
      next if ( $n == -1 && $! == EINTR );
      $n >= 0 or last;
      $to->write( $buf ) or last;
    }
  }

  defined( my $pid = fork ) or die "$0: fork: $!\n";
  if ( $pid == 0 ) {
    cat $sock, \*STDOUT; $sock->shutdown( 0 );
    _exit 0;
  }
  $SIG{ 'HUP' } = 'IGNORE';
  cat \*STDIN, $sock; $sock->shutdown( 1 );
  waitpid $pid, 0;
  exit;
}

if ( scalar @ARGV != 1 ) {
  die $usage;
}

my $userhost = $ARGV[ 0 ];

# Run SSH and read password
my $pty = new IO::Pty;
my $pty_slave = $pty->slave;

$pty_slave->clone_winsize_from( \*STDIN );

my $pid = fork;
die "$0: fork: $!\n" unless ( defined $pid );
if ( $pid == 0 ) { # child
  close $pty;
  open STDOUT, ">&", $pty_slave->fileno() or die;
  open STDERR, ">&", $pty_slave->fileno() or die;
  close $pty_slave;

  my $s;
  if ( defined $port_request ) {
    $s = q{sh -c 'MOSH_PORT=$1; shift; MOSH_IP=`set -- $SSH_CONNECTION; echo $3`; exec "$@" $MOSH_IP $MOSH_PORT' -- } . $port_request . ' ' . $server;
  } else {
    # retain compatibility with older server when no port requested
    $s = q{sh -c 'exec "$@" "`set -- $SSH_CONNECTION; echo $3`"' -- } . $server;
  }
  exec "$ssh " . shell_quote( '-S', 'none', '-o', "ProxyCommand=$0 --fake-proxy -- %h %p", '-t', $userhost, '--', "$server " . shell_quote( @server ) );
  die "Cannot exec ssh: $!\n";
} else { # server
  my ( $ip, $port, $key );
  $pty->close_slave();
  LINE: while ( <$pty> ) {
    chomp;
    if ( m{^MOSH IP } ) {
      ( $ip ) = m{^MOSH IP (\S+)\s*$} or die "Bad MOSH IP string: $_\n";
    } elsif ( m{^MOSH CONNECT } ) {
      if ( ( $port, $key ) = m{^MOSH CONNECT (\d+?) ([A-Za-z0-9/+]{22})\s*$} ) {
	last LINE;
      } else {
	die "Bad MOSH CONNECT string: $_\n";
      }
    } else {
      print "$_\n";
    }
  }
  waitpid $pid, 0;

  if ( not defined $ip ) {
      die "$0: Did not find remote IP address (is SSH ProxyCommand disabled?).\n";
  }

  if ( not defined $key or not defined $port ) {
    die "$0: Did not find mosh server startup message.\n";
  }

  # Now start real mosh client
  $ENV{ 'MOSH_KEY' } = $key;
  $ENV{ 'MOSH_PREDICTION_DISPLAY' } = $predict;
  exec {$client} ($client, $ip, $port);
}
